$date
	Tue Nov 07 21:19:16 2017
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module Verilog_154_233 $end
$var wire 8 ! out [8:1] $end
$var reg 8 " in [8:1] $end
$var reg 2 # setting [1:0] $end
$scope module inst $end
$var wire 8 $ in [8:1] $end
$var wire 2 % setting [1:0] $end
$var wire 5 & selectedOut [4:0] $end
$var wire 5 ' out4 [4:0] $end
$var wire 5 ( out3 [4:0] $end
$var wire 5 ) out2 [4:0] $end
$var wire 5 * out1 [4:0] $end
$var wire 8 + out [8:1] $end
$var wire 5 , encodedInput [4:0] $end
$scope module Decoder $end
$var wire 5 - selectedOut [4:0] $end
$var wire 8 . res [8:1] $end
$var wire 8 / out [8:1] $end
$upscope $end
$scope module Encoder $end
$var wire 8 0 in [8:1] $end
$var wire 8 1 res [8:1] $end
$var wire 5 2 encodedInput [4:0] $end
$upscope $end
$scope module box1 $end
$var wire 5 3 in [4:0] $end
$var wire 5 4 out [4:0] $end
$upscope $end
$scope module box2 $end
$var wire 5 5 in [4:0] $end
$var wire 5 6 out [4:0] $end
$upscope $end
$scope module box3 $end
$var wire 5 7 in [4:0] $end
$var wire 5 8 out [4:0] $end
$upscope $end
$scope module box4 $end
$var wire 5 9 in [4:0] $end
$var wire 5 : out [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10001 :
b111 9
b10 8
b111 7
b101 6
b111 5
b10100 4
b111 3
b111 2
b111 1
b1001000 0
b1000011 /
b10 .
b10 -
b111 ,
b1000011 +
b10100 *
b101 )
b10 (
b10001 '
b10 &
b10 %
b1001000 $
b10 #
b1001000 "
b1000011 !
$end
#100
b1001 (
b1001 8
b10010 )
b10010 6
b10011 *
b10011 4
b1010011 !
b1010011 +
b1010011 /
b10010 .
b1001 '
b1001 :
b10010 &
b10010 -
b100 ,
b100 2
b100 3
b100 5
b100 7
b100 9
b100 1
b1000101 "
b1000101 $
b1000101 0
b1 #
b1 %
#200
b10000 '
b10000 :
b1011001 !
b1011001 +
b1011001 /
b11000 .
b10000 )
b10000 6
b11000 &
b11000 -
b11000 *
b11000 4
b11 (
b11 8
b1011 ,
b1011 2
b1011 3
b1011 5
b1011 7
b1011 9
b1011 1
b1001100 "
b1001100 $
b1001100 0
b0 #
b0 %
#300
b1010001 !
b1010001 +
b1010001 /
b10000 .
b10000 &
b10000 -
b11 #
b11 %
#400
b110 )
b110 6
b10111 '
b10111 :
b110 (
b110 8
b1000111 !
b1000111 +
b1000111 /
b110 .
b0 *
b0 4
b110 &
b110 -
b1110 ,
b1110 2
b1110 3
b1110 5
b1110 7
b1110 9
b1110 1
b1001111 "
b1001111 $
b1001111 0
b10 #
b10 %
#500
b1010 )
b1010 6
b11001 '
b11001 :
b11 *
b11 4
b1001011 !
b1001011 +
b1001011 /
b1010 .
b1111 (
b1111 8
b1010 &
b1010 -
b10110 ,
b10110 2
b10110 3
b10110 5
b10110 7
b10110 9
b10110 1
b1010111 "
b1010111 $
b1010111 0
b1 #
b1 %
#600
b0 *
b0 4
b110 )
b110 6
b1000001 !
b1000001 +
b1000001 /
b0 .
b10111 '
b10111 :
b0 &
b0 -
b110 (
b110 8
b1110 ,
b1110 2
b1110 3
b1110 5
b1110 7
b1110 9
b1110 1
b1001111 "
b1001111 $
b1001111 0
b0 #
b0 %
#700
b111 '
b111 :
b0 (
b0 8
b1100 )
b1100 6
b1100 *
b1100 4
b1001000 !
b1001000 +
b1001000 /
b111 .
b111 &
b111 -
b10001 ,
b10001 2
b10001 3
b10001 5
b10001 7
b10001 9
b10001 1
b1010010 "
b1010010 $
b1010010 0
b11 #
b11 %
#800
b11000 *
b11000 4
b10000 )
b10000 6
b11 (
b11 8
b10000 '
b10000 :
b1000100 !
b1000100 +
b1000100 /
b11 .
b11 &
b11 -
b1011 ,
b1011 2
b1011 3
b1011 5
b1011 7
b1011 9
b1011 1
b1001100 "
b1001100 $
b1001100 0
b10 #
b10 %
#900
b1011 (
b1011 8
b10010 '
b10010 :
b10 )
b10 6
b10110 *
b10110 4
b1000011 !
b1000011 +
b1000011 /
b10 .
b10 &
b10 -
b11 ,
b11 2
b11 3
b11 5
b11 7
b11 9
b11 1
b1000100 "
b1000100 $
b1000100 0
b1 #
b1 %
#1100
b11 )
b11 6
b1001000 !
b1001000 +
b1001000 /
b111 .
b111 &
b111 -
b1100 '
b1100 :
b11001 *
b11001 4
b111 (
b111 8
b10 ,
b10 2
b10 3
b10 5
b10 7
b10 9
b10 1
b1000011 "
b1000011 $
b1000011 0
b10 #
b10 %
#1200
b110 *
b110 4
b11 '
b11 :
b10111 (
b10111 8
b100 )
b100 6
b1000101 !
b1000101 +
b1000101 /
b100 .
b100 &
b100 -
b10010 ,
b10010 2
b10010 3
b10010 5
b10010 7
b10010 9
b10010 1
b1010011 "
b1010011 $
b1010011 0
b1 #
b1 %
#1300
b1 '
b1 :
b1001100 !
b1001100 +
b1001100 /
b1011 .
b1011 *
b1011 4
b1011 &
b1011 -
b1000 )
b1000 6
b1000 (
b1000 8
b11000 ,
b11000 2
b11000 3
b11000 5
b11000 7
b11000 9
b11000 1
b1011001 "
b1011001 $
b1011001 0
b0 #
b0 %
#1400
b1011 )
b1011 6
b1001100 !
b1001100 +
b1001100 /
b1011 .
b1111 *
b1111 4
b1010 (
b1010 8
b1011 '
b1011 :
b1011 &
b1011 -
b10000 ,
b10000 2
b10000 3
b10000 5
b10000 7
b10000 9
b10000 1
b1010001 "
b1010001 $
b1010001 0
b11 #
b11 %
#1500
b10010 *
b10010 4
b1101 '
b1101 :
b1110 )
b1110 6
b1110 (
b1110 8
b1001111 !
b1001111 +
b1001111 /
b1110 .
b1110 &
b1110 -
b110 ,
b110 2
b110 3
b110 5
b110 7
b110 9
b110 1
b1000111 "
b1000111 $
b1000111 0
b10 #
b10 %
#1600
b10000 (
b10000 8
b10101 *
b10101 4
b10110 )
b10110 6
b10011 '
b10011 :
b1010111 !
b1010111 +
b1010111 /
b10110 .
b10110 &
b10110 -
b1010 ,
b1010 2
b1010 3
b1010 5
b1010 7
b1010 9
b1010 1
b1001011 "
b1001011 $
b1001011 0
b1 #
b1 %
#1700
b10111 )
b10111 6
b10001 (
b10001 8
b101 '
b101 :
b1110 *
b1110 4
b1001111 !
b1001111 +
b1001111 /
b1110 .
b1110 &
b1110 -
b0 ,
b0 2
b0 3
b0 5
b0 7
b0 9
b0 1
b1000001 "
b1000001 $
b1000001 0
b0 #
b0 %
#1800
b101 )
b101 6
b1010010 !
b1010010 +
b1010010 /
b10001 .
b10100 *
b10100 4
b10 (
b10 8
b10001 '
b10001 :
b10001 &
b10001 -
b111 ,
b111 2
b111 3
b111 5
b111 7
b111 9
b111 1
b1001000 "
b1001000 $
b1001000 0
b11 #
b11 %
#1900
b10 )
b10 6
b1011 (
b1011 8
b10110 *
b10110 4
b10010 '
b10010 :
b1001100 !
b1001100 +
b1001100 /
b1011 .
b1011 &
b1011 -
b11 ,
b11 2
b11 3
b11 5
b11 7
b11 9
b11 1
b1000100 "
b1000100 $
b1000100 0
b10 #
b10 %
#2000
b11 )
b11 6
b1000100 !
b1000100 +
b1000100 /
b11 .
b1100 '
b1100 :
b11 &
b11 -
b11001 *
b11001 4
b111 (
b111 8
b10 ,
b10 2
b10 3
b10 5
b10 7
b10 9
b10 1
b1000011 "
b1000011 $
b1000011 0
b1 #
b1 %
#2100
