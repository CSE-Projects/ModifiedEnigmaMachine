$date
	Tue Nov 07 21:19:50 2017
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module Verilog_154_233 $end
$var wire 8 ! out [8:1] $end
$var reg 8 " in [8:1] $end
$var reg 2 # setting [1:0] $end
$scope module inst $end
$var wire 8 $ in [8:1] $end
$var wire 2 % setting [1:0] $end
$var wire 8 & out4 [8:1] $end
$var wire 8 ' out3 [8:1] $end
$var wire 8 ( out2 [8:1] $end
$var wire 8 ) out1 [8:1] $end
$var reg 8 * inp [8:1] $end
$var reg 8 + out [8:1] $end
$scope module box1 $end
$var wire 8 , in [8:1] $end
$var reg 8 - out [8:1] $end
$upscope $end
$scope module box2 $end
$var wire 8 . in [8:1] $end
$var reg 8 / out [8:1] $end
$upscope $end
$scope module box3 $end
$var wire 8 0 in [8:1] $end
$var reg 8 1 out [8:1] $end
$upscope $end
$scope module box4 $end
$var wire 8 2 in [8:1] $end
$var reg 8 3 out [8:1] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1010010 3
b1001000 2
b1000011 1
b1001000 0
b1000110 /
b1001000 .
b1010101 -
b1001000 ,
bx +
b1001000 *
b1010101 )
b1000110 (
b1000011 '
b1010010 &
b10 %
b1001000 $
b10 #
b1001000 "
bx !
$end
#10
b1000011 !
b1000011 +
#100
b1010100 )
b1010100 -
b1010011 (
b1010011 /
b1001010 '
b1001010 1
b1001010 &
b1001010 3
b1000101 *
b1000101 ,
b1000101 .
b1000101 0
b1000101 2
b1000101 "
b1000101 $
b1 #
b1 %
#110
b1010011 !
b1010011 +
#200
b1010001 &
b1010001 3
b1000100 '
b1000100 1
b1010001 (
b1010001 /
b1011001 )
b1011001 -
b1001100 *
b1001100 ,
b1001100 .
b1001100 0
b1001100 2
b1001100 "
b1001100 $
b0 #
b0 %
#210
b1011001 !
b1011001 +
#300
b11 #
b11 %
#310
b1010001 !
b1010001 +
#400
b1000001 )
b1000001 -
b1000111 (
b1000111 /
b1000111 '
b1000111 1
b1011000 &
b1011000 3
b1001111 *
b1001111 ,
b1001111 .
b1001111 0
b1001111 2
b1001111 "
b1001111 $
b10 #
b10 %
#410
b1000111 !
b1000111 +
#500
b1011010 &
b1011010 3
b1010000 '
b1010000 1
b1001011 (
b1001011 /
b1000100 )
b1000100 -
b1010111 *
b1010111 ,
b1010111 .
b1010111 0
b1010111 2
b1010111 "
b1010111 $
b1 #
b1 %
#510
b1001011 !
b1001011 +
#600
b1000001 )
b1000001 -
b1000111 (
b1000111 /
b1000111 '
b1000111 1
b1011000 &
b1011000 3
b1001111 *
b1001111 ,
b1001111 .
b1001111 0
b1001111 2
b1001111 "
b1001111 $
b0 #
b0 %
#610
b1000001 !
b1000001 +
#700
b1001000 &
b1001000 3
b1000001 '
b1000001 1
b1001101 (
b1001101 /
b1001101 )
b1001101 -
b1010010 *
b1010010 ,
b1010010 .
b1010010 0
b1010010 2
b1010010 "
b1010010 $
b11 #
b11 %
#710
b1001000 !
b1001000 +
#800
b1011001 )
b1011001 -
b1010001 (
b1010001 /
b1000100 '
b1000100 1
b1010001 &
b1010001 3
b1001100 *
b1001100 ,
b1001100 .
b1001100 0
b1001100 2
b1001100 "
b1001100 $
b10 #
b10 %
#810
b1000100 !
b1000100 +
#900
b1010011 &
b1010011 3
b1001100 '
b1001100 1
b1000011 (
b1000011 /
b1010111 )
b1010111 -
b1000100 *
b1000100 ,
b1000100 .
b1000100 0
b1000100 2
b1000100 "
b1000100 $
b1 #
b1 %
#910
b1000011 !
b1000011 +
#1100
b1011010 )
b1011010 -
b1000100 (
b1000100 /
b1001000 '
b1001000 1
b1001101 &
b1001101 3
b1000011 *
b1000011 ,
b1000011 .
b1000011 0
b1000011 2
b1000011 "
b1000011 $
b10 #
b10 %
#1110
b1001000 !
b1001000 +
#1200
b1000100 &
b1000100 3
b1011000 '
b1011000 1
b1000101 (
b1000101 /
b1000111 )
b1000111 -
b1010011 *
b1010011 ,
b1010011 .
b1010011 0
b1010011 2
b1010011 "
b1010011 $
b1 #
b1 %
#1210
b1000101 !
b1000101 +
#1300
b1001100 )
b1001100 -
b1001001 (
b1001001 /
b1001001 '
b1001001 1
b1000010 &
b1000010 3
b1011001 *
b1011001 ,
b1011001 .
b1011001 0
b1011001 2
b1011001 "
b1011001 $
b0 #
b0 %
#1310
b1001100 !
b1001100 +
#1400
b1001100 &
b1001100 3
b1001011 '
b1001011 1
b1001100 (
b1001100 /
b1010000 )
b1010000 -
b1010001 *
b1010001 ,
b1010001 .
b1010001 0
b1010001 2
b1010001 "
b1010001 $
b11 #
b11 %
#1500
b1010011 )
b1010011 -
b1001111 (
b1001111 /
b1001111 '
b1001111 1
b1001110 &
b1001110 3
b1000111 *
b1000111 ,
b1000111 .
b1000111 0
b1000111 2
b1000111 "
b1000111 $
b10 #
b10 %
#1510
b1001111 !
b1001111 +
#1600
b1010100 &
b1010100 3
b1010001 '
b1010001 1
b1010111 (
b1010111 /
b1010110 )
b1010110 -
b1001011 *
b1001011 ,
b1001011 .
b1001011 0
b1001011 2
b1001011 "
b1001011 $
b1 #
b1 %
#1610
b1010111 !
b1010111 +
#1700
b1001111 )
b1001111 -
b1011000 (
b1011000 /
b1010010 '
b1010010 1
b1000110 &
b1000110 3
b1000001 *
b1000001 ,
b1000001 .
b1000001 0
b1000001 2
b1000001 "
b1000001 $
b0 #
b0 %
#1710
b1001111 !
b1001111 +
#1800
b1010010 &
b1010010 3
b1000011 '
b1000011 1
b1000110 (
b1000110 /
b1010101 )
b1010101 -
b1001000 *
b1001000 ,
b1001000 .
b1001000 0
b1001000 2
b1001000 "
b1001000 $
b11 #
b11 %
#1810
b1010010 !
b1010010 +
#1900
b1010111 )
b1010111 -
b1000011 (
b1000011 /
b1001100 '
b1001100 1
b1010011 &
b1010011 3
b1000100 *
b1000100 ,
b1000100 .
b1000100 0
b1000100 2
b1000100 "
b1000100 $
b10 #
b10 %
#1910
b1001100 !
b1001100 +
#2000
b1001101 &
b1001101 3
b1001000 '
b1001000 1
b1000100 (
b1000100 /
b1011010 )
b1011010 -
b1000011 *
b1000011 ,
b1000011 .
b1000011 0
b1000011 2
b1000011 "
b1000011 $
b1 #
b1 %
#2010
b1000100 !
b1000100 +
#2100
