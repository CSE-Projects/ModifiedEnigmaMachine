$date
	Fri Nov  3 16:29:01 2017
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module t_MEM $end
$var wire 8 ! out [8:1] $end
$var reg 8 " in [8:1] $end
$var reg 2 # setting [1:0] $end
$scope module inst $end
$var wire 5 $ encodedInput [4:0] $end
$var wire 8 % in [8:1] $end
$var wire 8 & out [8:1] $end
$var wire 5 ' out1 [4:0] $end
$var wire 5 ( out2 [4:0] $end
$var wire 5 ) out3 [4:0] $end
$var wire 5 * out4 [4:0] $end
$var wire 5 + selectedOut [4:0] $end
$var wire 2 , setting [1:0] $end
$scope module Encoder $end
$var wire 5 - encodedInput [4:0] $end
$var wire 8 . in [8:1] $end
$var wire 8 / res [8:1] $end
$upscope $end
$scope module box1 $end
$var wire 5 0 in [4:0] $end
$var wire 5 1 out [4:0] $end
$upscope $end
$scope module box2 $end
$var wire 5 2 in [4:0] $end
$var wire 5 3 out [4:0] $end
$upscope $end
$scope module box3 $end
$var wire 5 4 in [4:0] $end
$var wire 5 5 out [4:0] $end
$upscope $end
$scope module box4 $end
$var wire 5 6 in [4:0] $end
$var wire 5 7 out [4:0] $end
$upscope $end
$scope module Decoder $end
$var wire 8 8 out [8:1] $end
$var wire 8 9 res [8:1] $end
$var wire 5 : selectedOut [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10001 :
b10001 9
b1010010 8
b10001 7
b111 6
b10 5
b111 4
bz 3
b111 2
b10100 1
b111 0
b111 /
b1001000 .
b111 -
b11 ,
b10001 +
b10001 *
b10 )
bz (
b10100 '
b1010010 &
b1001000 %
b111 $
b11 #
b1001000 "
b1010010 !
$end
#100
b1001 )
b1001 5
b10011 '
b10011 1
b1001 9
b1001010 !
b1001010 &
b1001010 8
b1001 *
b1001 7
b1001 +
b1001 :
b100 $
b100 -
b100 0
b100 2
b100 4
b100 6
b10 #
b10 ,
b1000101 "
b1000101 %
b1000101 .
b100 /
#200
b11 9
b1000100 !
b1000100 &
b1000100 8
b11 +
b11 :
b10000 *
b10000 7
b11000 '
b11000 1
b11 )
b11 5
b1011 $
b1011 -
b1011 0
b1011 2
b1011 4
b1011 6
b1001100 "
b1001100 %
b1001100 .
b1011 /
#300
b10000 9
b1010001 !
b1010001 &
b1010001 8
b10000 +
b10000 :
b11 #
b11 ,
#400
b10111 *
b10111 7
b110 )
b110 5
b110 9
b1000111 !
b1000111 &
b1000111 8
b110 +
b110 :
b0 '
b0 1
b1110 $
b1110 -
b1110 0
b1110 2
b1110 4
b1110 6
b10 #
b10 ,
b1001111 "
b1001111 %
b1001111 .
b1110 /
#500
b1111 9
b1010000 !
b1010000 &
b1010000 8
b1111 +
b1111 :
b11001 *
b11001 7
b11 '
b11 1
b1111 )
b1111 5
b10110 $
b10110 -
b10110 0
b10110 2
b10110 4
b10110 6
b1010111 "
b1010111 %
b1010111 .
b10110 /
#600
b0 '
b0 1
b10111 *
b10111 7
b10111 9
b1011000 !
b1011000 &
b1011000 8
b110 )
b110 5
b10111 +
b10111 :
b1110 $
b1110 -
b1110 0
b1110 2
b1110 4
b1110 6
b11 #
b11 ,
b1001111 "
b1001111 %
b1001111 .
b1110 /
#700
b111 *
b111 7
b0 )
b0 5
b1100 '
b1100 1
b0 9
b1000001 !
b1000001 &
b1000001 8
b0 +
b0 :
b10001 $
b10001 -
b10001 0
b10001 2
b10001 4
b10001 6
b10 #
b10 ,
b1010010 "
b1010010 %
b1010010 .
b10001 /
#800
b11 9
b1000100 !
b1000100 &
b1000100 8
b11 +
b11 :
b11000 '
b11000 1
b11 )
b11 5
b10000 *
b10000 7
b1011 $
b1011 -
b1011 0
b1011 2
b1011 4
b1011 6
b1001100 "
b1001100 %
b1001100 .
b1011 /
#900
b1011 9
b1001100 !
b1001100 &
b1001100 8
b1011 +
b1011 :
b1011 )
b1011 5
b10010 *
b10010 7
b10110 '
b10110 1
b11 $
b11 -
b11 0
b11 2
b11 4
b11 6
b1000100 "
b1000100 %
b1000100 .
b11 /
#1100
